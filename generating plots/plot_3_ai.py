# -*- coding: utf-8 -*-
"""Plot 3 AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16TCnyFGZ8rK1YyoiORSeU1I0ENNurbAI
"""

!pip install tensorflow==2.12.1

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Replace 'your_file.csv' with the actual filename you uploaded
csv_file_path = 'df_transitions.csv'

# Read the CSV file using pandas
df = pd.read_csv(csv_file_path)

# Convert the pandas DataFrame to a NumPy array
numpy_array = df.to_numpy()

#ROF 30 57.5-58.6
#ROF 60 30 - 31.6
#ROF 40 42 - 43.6
#ROF 20 85 - 86.6
#ROF 10 166 - 167.1
#ROF 5 327 - 328.1
#ROF 4 412 - 413.1
#ROF 3 554 - 555.1
#ROF 2 829 - 830.1
#ROF 80 24 - 25
#ROF 120 17-18
#ROF 240 9.5 - 11
#ROF 480 6-7.5
#ROF 800 4.5-6
boundaries = [[57.5,58.6],[30,31.6],[42,43.6],[85,86.6],[166,167.1],[327,328.1],[412,413.1],[554,555.1],[829,830.1],[24,25],[17,18],[9.5,11],[6,7.5],[4.5,6]]

Data = []
Time = []

for boundary in boundaries:
  a = boundary[1]

  b = boundary[0]

  indices = np.where((numpy_array[:,0] > b) & (numpy_array[:,0] < a))
  a1 = indices[0][0]
  b1 = indices[0][np.size(indices)-1]

  Data.append(numpy_array[a1:b1,1])
  Time.append(numpy_array[a1:b1,0])

def time_series_expander(X,N_point):
  steps2 = len(X)
  Z = np.zeros(((steps2-1)*(N_point+1))+1)
  for i in range(0,steps2):
    Z[(N_point+1)*i] = X[i]
    for j in range(1,N_point+1):
      if i!=steps2-1:
        m = X[i+1]-X[i]
        delta = 1/(N_point+1)
        Z[((N_point+1)*i)+j]= (m*delta*j) + X[i]
  return Z

expanded_data = []

for data in Data:
  expanded_data.append(time_series_expander(data,10))

from google.colab import files
uploaded = files.upload()

from tensorflow.keras.models import load_model
model = load_model('Normal_form_CNN_LSTM_r=0.h5')

def DL_analysis(X):
  import statsmodels.api as sm
  from scipy.ndimage import gaussian_filter1d
  from sklearn.preprocessing import StandardScaler
  from sklearn.decomposition import PCA
  from statsmodels.tsa.seasonal import seasonal_decompose
  steps2 = len(X)
  steps = 1000
  intervals = 400
  sigmaa = 100
  padding = 100
  size = int(((steps2/steps)-1)*intervals)+1
  Y = np.zeros((size,steps))
  Y2 = np.zeros(steps+(2*padding))
  t = np.zeros(size)
  for i in range(0,size):
    j1=int(i*steps/intervals)
    j2 = j1+steps
    #j=i
    Y[i,:] = X[j1:j2]
    #Y2[padding:steps+padding] = Y[i,:]
    #frac = 0.75
    Y[i,:] = Y[i,:]-(gaussian_filter1d(Y[i,:], sigmaa,mode = 'nearest'))
    #Y2[i,:] = Y[i,100:1100]
    #Y[i,:] = Y2[padding:steps+padding]
    Y[i,:] = (Y[i,:]-np.average(Y[i,:]))/(np.std(Y[i,:]))
    #Y2[i,:] = (Y2[i,:]-np.average(Y2[i,:]))/(np.std(Y2[i,:]))
    #smoothed = sm.nonparametric.lowess(Y[i,:], np.arange(len(Y[i,:])), frac=frac)
    #Y[i,:] = (Y[i,:]-smoothed[:,1])/(np.std(Y[i,:]-smoothed[:,1]))

  np.shape(Y)
  predict_x=model.predict(Y)
  output=np.argmax(predict_x,axis=1)
  import matplotlib.pyplot as plt
  fold1_prob = predict_x[:,0]
  #fold2_prob = predict_x[:,1]
  Trans1_prob = predict_x[:,1]
  #Trans2_prob = predict_x[:,3]
  Hopf_prob = predict_x[:,2]
  Null_prob = predict_x[:,3]
  t= np.linspace(steps,steps2,size)
  #t= t*50/size
  plt.plot(t,fold1_prob,"r",label="fold")
  #plt.plot(t,fold2_prob,"r",label="fold")
  plt.plot(t,Trans1_prob,'g',label="trans1")
  #plt.plot(t,Trans2_prob,'g',label="trans")
  plt.plot(t,Hopf_prob,'y',label="Hopf")
  plt.plot(t,Null_prob,'b',label="null")
  #plt.plot(t,null_fold_prob,'y',label="Null_Fold")

  plt.legend(loc="lower left")
  plt.ylabel("DL Probability")
  plt.xlabel("Time")
  plt.axvline(x=0.7,color='black',ls='--', ymin=0,ymax=1,label='Alpha=0.55')
  return fold1_prob,Trans1_prob,Hopf_prob,Null_prob

def post_process(fold1_prob,Trans1_prob,Hopf_prob,Null_prob):
  window_size = 50

  Fold1 = np.convolve(fold1_prob, np.ones(window_size)/window_size, mode='valid')

  Trans1 = np.convolve(Trans1_prob, np.ones(window_size)/window_size, mode='valid')
  #Trans2_prob = np.convolve(Trans2_prob, np.ones(window_size)/window_size, mode='valid')
  Hopf1 = np.convolve(Hopf_prob, np.ones(window_size)/window_size, mode='valid')
  Null1 = np.convolve(Null_prob, np.ones(window_size)/window_size, mode='valid')
  return Fold1, Trans1, Hopf1, Null1

X1 = expanded_data[4]
t11 = np.linspace(0,1,len(X1))
fold1_prob,Trans1_prob,Hopf_prob,Null_prob = DL_analysis(expanded_data[4])
Fold1,Trans1,Hopf1,Null1 = post_process(fold1_prob,Trans1_prob,Hopf_prob,Null_prob)
t12 = np.linspace(0,1,len(Fold1))

X2 = expanded_data[5]
t21 = np.linspace(0,1,len(X2))
fold1_prob,Trans1_prob,Hopf_prob,Null_prob = DL_analysis(expanded_data[5])
Fold2,Trans2,Hopf2,Null2 = post_process(fold1_prob,Trans1_prob,Hopf_prob,Null_prob)
t22 = np.linspace(0,1,len(Fold2))

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
df = pd.read_csv('data_transitions.csv')
data_array = df.values
from scipy.ndimage import gaussian_filter1d

Data1 = list(reversed(data_array[0:1328,1]))
Data2 = list(reversed(data_array[1329:2019,1]))
Data3 = list(reversed(data_array[2019:2881,1]))
Data4 = list(reversed(data_array[2881:3269,1]))
Data5 = list(reversed(data_array[3269:3702,1]))
Data6 = list(reversed(data_array[3702:4215,1]))
Data7 = list(reversed(data_array[4215:4730,1]))
Data8 = list(reversed(data_array[4730:5220,1]))
Data9 = list(reversed(data_array[5220:5692,1]))
Data10 = list(reversed(data_array[5692:5950,1]))
Data11 = list(reversed(data_array[5950:6379,1]))
Data12 = list(reversed(data_array[6379:6649,1]))
Data13 = list(reversed(data_array[6649:6896,1]))

def time_series_expander(X,N_point):
  steps2 = len(X)
  Z = np.zeros(((steps2-1)*(N_point+1))+1)
  for i in range(0,steps2):
    Z[(N_point+1)*i] = X[i]
    for j in range(1,N_point+1):
      if i!=steps2-1:
        m = X[i+1]-X[i]
        delta = 1/(N_point+1)
        Z[((N_point+1)*i)+j]= (m*delta*j) + X[i]
  return Z

X3 = time_series_expander(Data5,10)
t31 = np.linspace(0,1,len(X3))
fold1_prob,Trans1_prob,Hopf_prob,Null_prob = DL_analysis(X3)
Fold3,Trans3,Hopf3,Null3 = post_process(fold1_prob,Trans1_prob,Hopf_prob,Null_prob)
t32 = np.linspace(0,1,len(Fold3))

X4 = time_series_expander(Data2,10)
t41 = np.linspace(0,1,len(X4))
fold1_prob,Trans1_prob,Hopf_prob,Null_prob = DL_analysis(X4)
Fold4,Trans4,Hopf4,Null4 = post_process(fold1_prob,Trans1_prob,Hopf_prob,Null_prob)
t42 = np.linspace(0,1,len(Fold4))

from google.colab import files
import matplotlib.pyplot as plt

# Set global font size
plt.rcParams.update({'font.size': 14})

# Create a figure with 6 subplots in a vertical layout (time series on top, DL analysis below)
fig, axs = plt.subplots(2, 4, figsize=(30, 12), sharex=True,
                        gridspec_kw={'width_ratios': [1, 1, 1, 1], 'wspace': 0.4})

# Define labels for each subplot
subplot_labels = ['A', 'B', 'C', 'D', 'E', 'F','G','H']

# Top row: Time series
axs[0, 0].plot(t11, X1, label="Time Series 1")
axs[0, 0].set_title("Thermoacoustic Transition (ROF 5)")
axs[0, 0].set_ylabel("State")
axs[0, 0].axvline(x=0.75, color='black', linestyle='--', linewidth=1)
axs[0, 0].text(-0.05, 1.05, subplot_labels[0], transform=axs[0, 0].transAxes, fontsize=16, fontweight='bold')

axs[0, 1].plot(t21, X2, label="Time Series 2")
axs[0, 1].set_title("Thermoacoustic Transition (ROF 10)")
axs[0, 1].set_ylabel("State")
axs[0, 1].axvline(x=0.6, color='black', linestyle='--', linewidth=1)
axs[0, 1].text(-0.05, 1.05, subplot_labels[1], transform=axs[0, 1].transAxes, fontsize=16, fontweight='bold')

axs[0, 2].plot(t31, X3, label="Time Series 3")
axs[0, 2].set_title("Anoxia Dataset (64PE)")
axs[0, 2].set_ylabel("State")
axs[0, 2].axvline(x=0.9, color='black', linestyle='--', linewidth=1)
axs[0, 2].text(-0.05, 1.05, subplot_labels[2], transform=axs[0, 2].transAxes, fontsize=16, fontweight='bold')

axs[0, 3].plot(t41, X4, label="Time Series 3")
axs[0, 3].set_title("Anoxia Dataset (64PE)")
axs[0, 3].set_ylabel("State")
axs[0, 3].axvline(x=0.7, color='black', linestyle='--', linewidth=1)
axs[0, 3].text(-0.05, 1.05, subplot_labels[3], transform=axs[0, 3].transAxes, fontsize=16, fontweight='bold')


# Bottom row: DL analysis results
axs[1, 0].plot(t12, Hopf1, color='darkgoldenrod', label="Hopf")
axs[1, 0].plot(t12, Trans1, color='green', label="Trans")
axs[1, 0].plot(t12, Fold1, color='red', label="Fold")
axs[1, 0].plot(t12, Null1, color='blue', label="Null")
axs[1, 0].set_title("DL Analysis")
axs[1, 0].set_ylabel("DL Probability")
axs[1, 0].axvline(x=0.75, color='black', linestyle='--', linewidth=1)
axs[1, 0].legend(loc='upper left')
axs[1, 0].text(-0.05, 1.05, subplot_labels[4], transform=axs[1, 0].transAxes, fontsize=16, fontweight='bold')

axs[1, 1].plot(t22, Hopf2, color='darkgoldenrod', label="Hopf")
axs[1, 1].plot(t22, Trans2, color='green', label="Trans")
axs[1, 1].plot(t22, Fold2, color='red', label="Fold")
axs[1, 1].plot(t22, Null2, color='blue', label="Null")
axs[1, 1].set_title("DL Analysis")
axs[1, 1].set_ylabel("DL Probability")
axs[1, 1].axvline(x=0.6, color='black', linestyle='--', linewidth=1)
axs[1, 1].legend(loc='upper left')
axs[1, 1].text(-0.05, 1.05, subplot_labels[5], transform=axs[1, 1].transAxes, fontsize=16, fontweight='bold')

axs[1, 2].plot(t32, Hopf3, color='darkgoldenrod', label="Hopf")
axs[1, 2].plot(t32, Trans3, color='green', label="Trans")
axs[1, 2].plot(t32, Fold3, color='red', label="Fold")
axs[1, 2].plot(t32, Null3, color='blue', label="Null")
axs[1, 2].set_title("DL Analysis")
axs[1, 2].set_ylabel("DL Probability")
axs[1, 2].axvline(x=0.9, color='black', linestyle='--', linewidth=1)
axs[1, 2].legend(loc='upper left')
axs[1, 2].text(-0.05, 1.05, subplot_labels[6], transform=axs[1, 2].transAxes, fontsize=16, fontweight='bold')

axs[1, 3].plot(t42, Hopf4, color='darkgoldenrod', label="Hopf")
axs[1, 3].plot(t42, Trans4, color='green', label="Trans")
axs[1, 3].plot(t42, Fold4, color='red', label="Fold")
axs[1, 3].plot(t42, Null4, color='blue', label="Null")
axs[1, 3].set_title("DL Analysis")
axs[1, 3].set_ylabel("DL Probability")
axs[1, 3].axvline(x=0.7, color='black', linestyle='--', linewidth=1)
axs[1, 3].legend(loc='upper left')
axs[1, 3].text(-0.05, 1.05, subplot_labels[7], transform=axs[1, 3].transAxes, fontsize=16, fontweight='bold')

# Link x-axis across all plots
for ax in axs.flat:
    ax.set_xlabel("Scaled Time")

# Adjust layout
plt.tight_layout()
filename = "plot_with_labels.png"
fig.savefig(filename, dpi=300, bbox_inches="tight")

# Download the plot file
files.download(filename)
plt.show()